/*
 * Speechmatics ASR REST API
 *
 * The Speechmatics Automatic Speech Recognition REST API is used to submit ASR jobs and receive the results. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@speechmatics.com
 * Generated by: https://openapi-generator.tech
 */

use crate::batch::models;
use serde::{Deserialize, Serialize};

/// SentimentSummary : Holds overall sentiment information, as well as detailed per-speaker and per-channel sentiment data.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SentimentSummary {
    #[serde(rename = "overall", skip_serializing_if = "Option::is_none")]
    pub overall: Option<Box<models::SentimentSummaryDetail>>,
    /// An array of objects that represent sentiment data for a specific speaker.
    #[serde(rename = "speakers", skip_serializing_if = "Option::is_none")]
    pub speakers: Option<Vec<models::SentimentSpeakerSummary>>,
    /// An array of objects that represent sentiment data for a specific channel.
    #[serde(rename = "channels", skip_serializing_if = "Option::is_none")]
    pub channels: Option<Vec<models::SentimentChannelSummary>>,
}

impl SentimentSummary {
    /// Holds overall sentiment information, as well as detailed per-speaker and per-channel sentiment data.
    pub fn new() -> SentimentSummary {
        SentimentSummary {
            overall: None,
            speakers: None,
            channels: None,
        }
    }
}

